name: "Infrastructure as Code Deployment"

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Select environment'
        required: true
        default: 'DEV'
        type: choice
        options:
          - DEV
          - DEV-YELLOW
          - QA
          - PRD

      action:
        description: 'action to perform by terraform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

  push:
    branches:
      - main
      - dev

  pull_request:
    branches:
      - main
      - dev

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.env }}

    defaults:
      run:
        working-directory: ${{ vars.TF_WORKING_DIRECTORY }}

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_USE_OIDC: true
      ARM_USE_AZUREAD: true
      TF_BACKEND_STORAGE_ACCOUNT_NAME: ${{ vars.TF_BACKEND_STORAGE_ACCOUNT_NAME }}
      TF_BACKEND_CONTAINER_NAME: ${{ vars.TF_BACKEND_CONTAINER_NAME }}

    steps:
      - uses: actions/checkout@v4

      - name: "Azure Login"
        uses: azure/login@v2
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}

      - name: Generate backend.tf
        run: |
          cat > ./backend.tf <<EOF
          terraform {
            backend "azurerm" {  
              storage_account_name  = "${{ env.TF_BACKEND_STORAGE_ACCOUNT_NAME }}"
              container_name        = "${{ env.TF_BACKEND_CONTAINER_NAME }}"
              key                   = "${{ github.event.inputs.env }}.api.tfstate" 
            }
          }
          EOF

      - name: Show backend.tf
        run: cat ./backend.tf

      # - name: "Set Terraform environment variables"
      #   run: |
      #     echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
      #     echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
      #     echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' }}
        run: terraform plan --var-file=./env/${{ github.event.inputs.env }}.tfvars

      # - name: "Terraform Init"
      #   id: init
      #   run: terraform init
      #   working-directory: deploy/

      # - name: "Terraform Plan"
      #   id: plan
      #   run: terraform plan -var-file="environments/dev.tfvars"
      #   working-directory: deploy/

  # terraform-apply:
  #   needs: terraform-plan
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   environment: dev
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: "Azure Login"
  #       uses: azure/login@v1
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}

  #     - name: "Set Terraform environment variables"
  #       run: |
  #         echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
  #         echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
  #         echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

  #     - name: "Setup Terraform"
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: "1.5.0"

  #     - name: "Terraform Init"
  #       run: terraform init
  #       working-directory: deploy/

  #     - name: "Terraform Apply"
  #       run: terraform apply -auto-approve -var-file="environments/dev.tfvars"
  #       working-directory: deploy/