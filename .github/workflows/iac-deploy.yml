name: "Deploy Core Infrastructure"

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Select environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod

      action:
        description: 'action to perform by terraform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

  push:
    branches:
      - main
      - dev

  pull_request:
    branches:
      - main
      - dev

  schedule:
    - cron: '0 19 * * *'

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.env }}

    defaults:
      run:
        working-directory: ${{ vars.TF_WORKING_DIRECTORY }}

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true
      TF_BACKEND_CONTAINER_NAME: ${{ vars.TF_BACKEND_CONTAINER_NAME }}
      TF_BACKEND_STORAGE_ACCOUNT_NAME: ${{ vars.TF_BACKEND_STORAGE_ACCOUNT_NAME }}

    steps:
      - uses: actions/checkout@v4

      - name: "Azure Login"
        uses: azure/login@v2
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}

      - name: Generate backend.tf
        run: |
          cat > ./backend.tf <<EOF
          terraform {
            backend "azurerm" {  
              storage_account_name  = "${{ env.TF_BACKEND_STORAGE_ACCOUNT_NAME }}"
              container_name        = "${{ env.TF_BACKEND_CONTAINER_NAME }}"
              key                   = "${{ github.event.inputs.env }}.api.tfstate" 
            }
          }
          EOF

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop == 'true' }}
        id: plan
        run: terraform plan --var-file=./env/${{ github.event.inputs.env }}.tfvars

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply --var-file=./env/${{ github.event.inputs.env }}.tfvars -auto-approve

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy --var-file=./env/${{ github.event.inputs.env }}.tfvars -auto-approve
